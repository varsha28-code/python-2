from collections import deque
class Solution(object):
    def numEnclaves(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        m = len(grid[0])        
        vis = [[0] * m for _ in range(n)]
        q = deque()
        # Step 1: Add all boundary land cells to queue
        for i in range(n):
            for j in range(m):
                if (i == 0 or j == 0 or i == n - 1 or j == m - 1) and grid[i][j] == 1:
                    q.append((i, j))
                    vis[i][j] = 1
        # Step 2: BFS traversal to mark reachable land
        while q:
            row, col = q.popleft()
            for r, c in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                ur, uc = row + r, col + c
                if 0 <= ur < n and 0 <= uc < m and grid[ur][uc] == 1 and vis[ur][uc] == 0:
                    vis[ur][uc] = 1
                    q.append((ur, uc))
        # Step 3: Count enclaves (land not visited)
        count = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1 and vis[i][j] == 0:
                    count += 1
        return count
